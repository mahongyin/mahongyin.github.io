(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{517:function(a,t,s){"use strict";s.r(t);var n=s(2),r=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"用类制造对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用类制造对象"}},[a._v("#")]),a._v(" 用类制造对象")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"20210307200759-2021-03-07","data-src":"https://raw.githubusercontent.com/fengwei2002/Pictures_01/master/img/20210307200759-2021-03-07.png",loading:"lazy"}})]),a._v(" "),s("p",[a._v("和 py 里面的 turtle 库使用方法差不多")]),a._v(" "),s("h2",{attrs:{id:"回收"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#回收"}},[a._v("#")]),a._v(" 回收")]),a._v(" "),s("p",[a._v("java 里面不关心什么时候变量消失，具有垃圾回收机制")]),a._v(" "),s("h2",{attrs:{id:"类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类"}},[a._v("#")]),a._v(" 类")]),a._v(" "),s("p",[a._v("java 会给成员变量默认值，0.。")]),a._v(" "),s("h3",{attrs:{id:"构造函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[a._v("#")]),a._v(" 构造函数")]),a._v(" "),s("p",[a._v("构造时自动调用")]),a._v(" "),s("p",[a._v("进去的第一件事就是回到对象的变量初始化部分")]),a._v(" "),s("p",[a._v("没有返回类型的函数")]),a._v(" "),s("p",[a._v("可以有多个构造函数，但是需要通过参数类型来区分")]),a._v(" "),s("h3",{attrs:{id:"private"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#private"}},[a._v("#")]),a._v(" private")]),a._v(" "),s("p",[a._v("针对类而不是针对对象")]),a._v(" "),s("h3",{attrs:{id:"public"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public"}},[a._v("#")]),a._v(" public")]),a._v(" "),s("p",[a._v("一个编译单元只能有一个 public 的类")]),a._v(" "),s("p",[a._v("没有声明 public 的类当离开这个文件之后就不能使用了")]),a._v(" "),s("h2",{attrs:{id:"包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#包"}},[a._v("#")]),a._v(" 包")]),a._v(" "),s("p",[a._v("package 目录层级就是包，类的管理方式")]),a._v(" "),s("p",[a._v("import 和 py 中的 import 相同，引入一个类，之后使用类的时候就不用每次使用” 点 “出来的全名了")]),a._v(" "),s("p",[a._v("使用 display.led 创建子文件夹 import java.util.Scanner;")]),a._v(" "),s("h2",{attrs:{id:"类变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类变量"}},[a._v("#")]),a._v(" 类变量")]),a._v(" "),s("p",[a._v("加上 static 修饰的变量可以使用类的名字加上点来操作那个值，任何一个对象都拥有这变量，但是只有那一份，"),s("br"),a._v("\n不管是在对象中修改还是使用类点进行修改。都是那一份变量")]),a._v(" "),s("p",[a._v("他们的初始化和对象的创建是没有关系的")]),a._v(" "),s("h2",{attrs:{id:"类函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类函数"}},[a._v("#")]),a._v(" 类函数")]),a._v(" "),s("p",[a._v("函数前面的 static 修饰，这个函数和对象没有关系，他是属于这个类的")]),a._v(" "),s("p",[a._v("可以在 static 函数中调用其他 static 函数")]),a._v(" "),s("h2",{attrs:{id:"泛型容器类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型容器类"}},[a._v("#")]),a._v(" 泛型容器类")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("package")]),a._v(" javademo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("util")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ArrayList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("util")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Scanner")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" javaDemo "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ArrayList")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" notes "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ArrayList")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//notes 是一个对象管理者")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Scanner")]),a._v(" in "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Scanner")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("in"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br")])]),s("p",[a._v("要确定容器的类型，容器要放入的元素的类型，相当于 cpp 中的 vector")]),a._v(" "),s("h3",{attrs:{id:"arraylist-常用操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arraylist-常用操作"}},[a._v("#")]),a._v(" ArrayList 常用操作")]),a._v(" "),s("h2",{attrs:{id:"for-each-循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#for-each-循环"}},[a._v("#")]),a._v(" for each 循环")]),a._v(" "),s("p",[a._v("数组中使用 for each 不能进行元素的修改，得到的是元素的复制品")]),a._v(" "),s("p",[a._v("在对象数组中使用 for each 循环就可以改变具体的值")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"20210310162451-2021-03-10","data-src":"https://raw.githubusercontent.com/fengwei2002/Pictures_01/master/img/20210310162451-2021-03-10.png",loading:"lazy"}})]),a._v(" "),s("p",[a._v("容器类可以使用 for each 循环")]),a._v(" "),s("h2",{attrs:{id:"set-容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set-容器"}},[a._v("#")]),a._v(" set 容器")]),a._v(" "),s("p",[a._v("相当于数学中的 set")]),a._v(" "),s("p",[a._v("在集合中没有重复的元素，所有元素各不相同")]),a._v(" "),s("p",[a._v("可以直接放入元素，自动去重")]),a._v(" "),s("p",[a._v("可以直接进行  "),s("code",[a._v("System.out.println(myset)")]),a._v("  输出")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"20210310164717-2021-03-10","data-src":"https://raw.githubusercontent.com/fengwei2002/Pictures_01/master/img/20210310164717-2021-03-10.png",loading:"lazy"}})]),a._v(" "),s("p",[a._v("所有具有 toString 函数的类都可以直接输出，包括自定义手写类")]),a._v(" "),s("h2",{attrs:{id:"hash-表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hash-表"}},[a._v("#")]),a._v(" hash 表")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("package")]),a._v(" javademo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("util")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ArrayList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("util")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HashMap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("util")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Scanner")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" javaDemo "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HashMap")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" coins "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HashMap")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Scanner")]),a._v(" in "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Scanner")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("in"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br")])]),s("p",[a._v("对于 hash 表来说 hash 的键值也只能存在一个，多次输入值保留最后一个")]),a._v(" "),s("h2",{attrs:{id:"继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[a._v("#")]),a._v(" 继承")]),a._v(" "),s("p",[a._v("用于创建有同种特点的类")]),a._v(" "),s("p",[a._v("extends 关键字")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" CD "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" items "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("p",[a._v("CD 成为 items 的一个子类")]),a._v(" "),s("h2",{attrs:{id:"子类父类关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#子类父类关系"}},[a._v("#")]),a._v(" 子类父类关系")]),a._v(" "),s("p",[a._v("private ： 继承类不可以直接使用")]),a._v(" "),s("p",[a._v("protected ： 自己可以访问，同一个包内可以访问，子类的继承可以访问")]),a._v(" "),s("p",[a._v("关于构造函数中的： "),s("code",[a._v("super(title);")])]),a._v(" "),s("p",[a._v("这个函数要传入父类已经完成的构造函数赋值项")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"20210311210328-2021-03-11","data-src":"https://raw.githubusercontent.com/fengwei2002/Pictures_01/master/img/20210311210328-2021-03-11.png",loading:"lazy"}})]),a._v(" "),s("p",[a._v("当执行子类的构造函数时会自动先调用父类构造器，也就是  "),s("code",[a._v("super();")]),a._v("  但是如果父类没有无参构造函数，就会报错"),s("br"),a._v("\n当父类具有有参构造函数的时候，用 super 带参，传给父级后，就寻找对应参数的父类构造函数")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"20210311211011-2021-03-11","data-src":"https://raw.githubusercontent.com/fengwei2002/Pictures_01/master/img/20210311211011-2021-03-11.png",loading:"lazy"}})]),a._v(" "),s("p",[a._v("子类会覆盖父类的成员变量")]),a._v(" "),s("p",[a._v("如果想在子类的重写函数中，沿用父类对应函数的相关功能，用 super 引出")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"20210311211737-2021-03-11","data-src":"https://raw.githubusercontent.com/fengwei2002/Pictures_01/master/img/20210311211737-2021-03-11.png",loading:"lazy"}})]),a._v(" "),s("p",[a._v("不同的子类只要具有相同的父类就可以放入一个父类的容器里面")]),a._v(" "),s("h2",{attrs:{id:"向上造型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#向上造型"}},[a._v("#")]),a._v(" 向上造型")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"20210311212853-2021-03-11","data-src":"https://raw.githubusercontent.com/fengwei2002/Pictures_01/master/img/20210311212853-2021-03-11.png",loading:"lazy"}})]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"20210311213636-2021-03-11","data-src":"https://raw.githubusercontent.com/fengwei2002/Pictures_01/master/img/20210311213636-2021-03-11.png",loading:"lazy"}})]),a._v(" "),s("p",[a._v("只是进行看待方式的转换，而不是类型的转换")]),a._v(" "),s("p",[a._v("那一个子类的对象当作一个父类的变量来用就叫做向上造型")]),a._v(" "),s("h2",{attrs:{id:"函数调用的绑定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数调用的绑定"}},[a._v("#")]),a._v(" 函数调用的绑定")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"20210311214245-2021-03-11","data-src":"https://raw.githubusercontent.com/fengwei2002/Pictures_01/master/img/20210311214245-2021-03-11.png",loading:"lazy"}})]),a._v(" "),s("p",[a._v("java 默认所有的绑定都是动态绑定")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"20210311214358-2021-03-11","data-src":"https://raw.githubusercontent.com/fengwei2002/Pictures_01/master/img/20210311214358-2021-03-11.png",loading:"lazy"}}),a._v("、")]),a._v(" "),s("p",[a._v("多态就是使用一个变量调用一个函数，具体使用什么函数自己去决定")]),a._v(" "),s("h2",{attrs:{id:"类型系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型系统"}},[a._v("#")]),a._v(" 类型系统")]),a._v(" "),s("p",[a._v("除了 cpp，所有面向对象语言都具有这种单根结构的类型系统")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"20210311215037-2021-03-11","data-src":"https://raw.githubusercontent.com/fengwei2002/Pictures_01/master/img/20210311215037-2021-03-11.png",loading:"lazy"}})]),a._v(" "),s("p",[a._v("判断两个同类型对象是否相同的时候，需要自己写一个 equals 函数")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"20210311215910-2021-03-11","data-src":"https://raw.githubusercontent.com/fengwei2002/Pictures_01/master/img/20210311215910-2021-03-11.png",loading:"lazy"}})]),a._v(" "),s("h2",{attrs:{id:"dome的新媒体类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dome的新媒体类型"}},[a._v("#")]),a._v(" DOME 的新媒体类型")]),a._v(" "),s("p",[a._v("可扩展性")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"20210312214136-2021-03-12","data-src":"https://raw.githubusercontent.com/fengwei2002/Pictures_01/master/img/20210312214136-2021-03-12.png",loading:"lazy"}})]),a._v(" "),s("h2",{attrs:{id:"oop-语言设计缺陷修复"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#oop-语言设计缺陷修复"}},[a._v("#")]),a._v(" OOP 语言设计缺陷修复")]),a._v(" "),s("ul",[s("li",[a._v("消除代码复制：利用函数消除多行相同的内容")]),a._v(" "),s("li",[a._v("封装：将经常用到的同类型信息进行封装")]),a._v(" "),s("li",[a._v("耦合度越低越好：万不得已的时候才使用 public，私有变量，转用公有函数实现，虽然代码多了，但是维持了自定义的接口，封装")])]),a._v(" "),s("p",[a._v("stringbuffer  可以减少系统开销")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"20210312220114-2021-03-12","data-src":"https://raw.githubusercontent.com/fengwei2002/Pictures_01/master/img/20210312220114-2021-03-12.png",loading:"lazy"}})]),a._v(" "),s("p",[a._v("同类型成员变量采用容器进行设计，这样同类型的变量就不是硬编码了"),s("br"),a._v("\n例如一个房间中的方向和路径，都用容器写后，就可以使用接口进行扩充，真不错")]),a._v(" "),s("p",[a._v("把程序的硬编码尽可能的转换为框架 + 数据的结构")]),a._v(" "),s("h2",{attrs:{id:"细胞自动机"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#细胞自动机"}},[a._v("#")]),a._v(" 细胞自动机")]),a._v(" "),s("p",[a._v("数据的表现与分离")]),a._v(" "),s("p",[a._v("程序的业务逻辑与表现无关")]),a._v(" "),s("p",[a._v("提供数据后可以单独修改界面的内容")]),a._v(" "),s("p",[a._v("每一个部分只做自己单独的功能")]),a._v(" "),s("p",[a._v("面向对象语言除了 cpp 都不支持对象的多继承机制（一个类继承两个类的功能）")]),a._v(" "),s("h3",{attrs:{id:"狐狸与兔子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#狐狸与兔子"}},[a._v("#")]),a._v(" 狐狸与兔子")]),a._v(" "),s("h2",{attrs:{id:"接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[a._v("#")]),a._v(" 接口")]),a._v(" "),s("p",[a._v("interface")]),a._v(" "),s("ul",[s("li",[a._v("接口是纯抽象类")]),a._v(" "),s("li",[a._v("所有的成员函数都是抽象函数")]),a._v(" "),s("li",[a._v("所有的成员变量都是 public static final")]),a._v(" "),s("li",[a._v("接口规定了长什么样，但是不管里面有什么")])]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"20210314150242-2021-03-14","data-src":"https://raw.githubusercontent.com/fengwei2002/Pictures_01/master/img/20210314150242-2021-03-14.png",loading:"lazy"}})]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"20210314150915-2021-03-14","data-src":"https://raw.githubusercontent.com/fengwei2002/Pictures_01/master/img/20210314150915-2021-03-14.png",loading:"lazy"}})]),a._v(" "),s("h2",{attrs:{id:"控制反转"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#控制反转"}},[a._v("#")]),a._v(" 控制反转")]),a._v(" "),s("p",[a._v("注入反转")]),a._v(" "),s("p",[a._v("内部类的使用可以方便的很，可以访问其他的成员变量和其他的成员函数")]),a._v(" "),s("h2",{attrs:{id:"mvc-设计模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mvc-设计模式"}},[a._v("#")]),a._v(" mvc 设计模式")]),a._v(" "),s("p",[a._v("eg：课程表")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"20210314174633-2021-03-14","data-src":"https://raw.githubusercontent.com/fengwei2002/Pictures_01/master/img/20210314174633-2021-03-14.png",loading:"lazy"}})]),a._v(" "),s("p",[a._v("数据是随着输入的变化而变化的，用户的操作不直接修改界面的显示内容，用来调整内部数据，然后数据的变化引起新的界面的变化")]),a._v(" "),s("h2",{attrs:{id:"异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异常"}},[a._v("#")]),a._v(" 异常")]),a._v(" "),s("p",[s("code",[a._v("try catch (e)")])]),a._v(" "),s("p",[a._v("好像每个语言都是这个语法，都是这个逻辑，但是平时写代码的时候基本不会用到，所以用到的时候再看就好了")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"20210314175534-2021-03-14","data-src":"https://raw.githubusercontent.com/fengwei2002/Pictures_01/master/img/20210314175534-2021-03-14.png",loading:"lazy"}})]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"20210314175725-2021-03-14","data-src":"https://raw.githubusercontent.com/fengwei2002/Pictures_01/master/img/20210314175725-2021-03-14.png",loading:"lazy"}})]),a._v(" "),s("p",[a._v("异常的再次抛出")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"20210314181112-2021-03-14","data-src":"https://raw.githubusercontent.com/fengwei2002/Pictures_01/master/img/20210314181112-2021-03-14.png",loading:"lazy"}})]),a._v(" "),s("p",[a._v("异常机制最大的好处就是分开了业务逻辑和错误处理代码")]),a._v(" "),s("p",[a._v("抛出子类异常会被父类异常捕捉到")]),a._v(" "),s("h2",{attrs:{id:"流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#流"}},[a._v("#")]),a._v(" 流")]),a._v(" "),s("p",[a._v("文件流：处理字节")]),a._v(" "),s("p",[a._v("流过滤器：二进制方式处理基本数据")]),a._v(" "),s("p",[a._v("文本流：处理 unicode")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"20210314212944-2021-03-14","data-src":"https://raw.githubusercontent.com/fengwei2002/Pictures_01/master/img/20210314212944-2021-03-14.png",loading:"lazy"}})]),a._v(" "),s("p",[a._v("汉字编码：UTF8 GBK：添加参数，告诉程序应该按照什么编码进行解码")]),a._v(" "),s("p",[a._v("流的应用:"),s("br"),a._v(" "),s("img",{staticClass:"lazy",attrs:{alt:"20210314214953-2021-03-14","data-src":"https://raw.githubusercontent.com/fengwei2002/Pictures_01/master/img/20210314214953-2021-03-14.png",loading:"lazy"}})]),a._v(" "),s("p",[a._v("对象串行化：用于直接将对象写入文件中"),s("br"),a._v(" "),s("img",{staticClass:"lazy",attrs:{alt:"20210314215751-2021-03-14","data-src":"https://raw.githubusercontent.com/fengwei2002/Pictures_01/master/img/20210314215751-2021-03-14.png",loading:"lazy"}})])])}),[],!1,null,null,null);t.default=r.exports}}]);