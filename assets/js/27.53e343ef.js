(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{506:function(s,a,n){"use strict";n.r(a);var t=n(2),e=Object(t.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("blockquote",[n("p",[s._v("常用的 Git Bash & GitHub 模板")])]),s._v(" "),n("h2",{attrs:{id:"_1-当某次提交出现-bug-后悔时"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-当某次提交出现-bug-后悔时"}},[s._v("#")]),s._v(" 1. 当某次提交出现 bug 后悔时")]),s._v(" "),n("h3",{attrs:{id:"_1-1-强制推送"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-强制推送"}},[s._v("#")]),s._v(" 1.1. 强制推送")]),s._v(" "),n("p",[s._v("简单但是不推荐：当确保上一次的提交完全不想要的时候执行")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("git log")]),s._v("  查看历史 ID")]),s._v(" "),n("li",[n("code",[s._v("git reset --hard")]),s._v("  + ID")]),s._v(" "),n("li",[n("code",[s._v("git push -f origin master")])])]),s._v(" "),n("h3",{attrs:{id:"_1-2-比较文件进行推送"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-比较文件进行推送"}},[s._v("#")]),s._v(" 1.2. 比较文件进行推送")]),s._v(" "),n("p",[s._v("通过 vscode 可视化窗口可以更加方便的查看是否融合指定文件")]),s._v(" "),n("h2",{attrs:{id:"_2-记录用户名和密码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-记录用户名和密码"}},[s._v("#")]),s._v(" 2. 记录用户名和密码")]),s._v(" "),n("p",[s._v("当每次推送都出现让输入 id 和密码时："),n("br"),s._v(" "),n("code",[s._v("bash here")])]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global credential.helper store\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" pull /git push （这里需要输入用户名和密码，以后就不用了）\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("执行完 git push 再测试一次，解决了")]),s._v(" "),n("h2",{attrs:{id:"_3-添加新-github-账户"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-添加新-github-账户"}},[s._v("#")]),s._v(" 3. 添加新 GitHub 账户")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global user.name "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("username"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global user.email "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("email"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nssh-keygen -t rsa -C "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"xxx@qq.com"')]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("ul",[n("li",[s._v("然后成功后会在 User 文件夹对应的用户下创建。ssh 文件夹，其中有一个  "),n("code",[s._v("id_rsa.pub")]),s._v("  文件，复制其中的  "),n("code",[s._v("key")]),s._v("  不要删除或者添加字符：")]),s._v(" "),n("li",[s._v("之后返回 github, 进入 Account Settings（账户配置）, 左边选择  "),n("code",[s._v("SSH and GPG Keys")]),s._v("  选项，在右上角 new ssh 中填写复制好的 Key")]),s._v(" "),n("li",[s._v("验证是否绑定本地成功，在  "),n("code",[s._v("bash")]),s._v("  中验证，输入指令：")])]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ssh")]),s._v(" -T git@github.com  \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("如果第一次执行该指令，则会提示是否继续，（多个选项）如果我们 "),n("strong",[s._v("输入 yes")]),s._v(" 就会看到成功信息")]),s._v(" "),n("p",[s._v("HI..."),n("br"),s._v("\nbalabulabula")]),s._v(" "),n("p",[s._v("新生成密钥的时候，git clone 或者 push 的时候，也有可能会报这样的错误：")]),s._v(" "),n("p",[s._v("The authenticity of host 'github.com (192.30.255.112)' can't be established."),n("br"),s._v("\nRSA key fingerprint is "),n("s",[s._v("乱码")]),s._v(".")]),s._v(" "),n("p",[s._v("这个的原因是少了一个 known_hosts 文件，本来密钥文件应该是三个，现在是两个，便报了这样的错误，此时选择 yes 回车之后，便可，同时生成了缺少了的 known_hosts 文件：")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[s._v("Are you sure you want to "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("continue")]),s._v(" connecting "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("yes/no"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("? //输入yes，回车即可正常使用\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h2",{attrs:{id:"_4-windows-lf-和-crlf-的转换问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-windows-lf-和-crlf-的转换问题"}},[s._v("#")]),s._v(" 4. Windows LF 和 CRLF 的转换问题")]),s._v(" "),n("p",[s._v("用 vuepress 时 yarn run deploy 发现有这种警告信息")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[s._v("warning: LF will be replaced by CRLF "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("404")]),s._v(".html.\nThe "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" will have its original line endings "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" your working directory\nwarning: LF will be replaced by CRLF "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" About/index.html.\nThe "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" will have its original line endings "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" your working directory\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("所以就准备来解决这个 warning")]),s._v(" "),n("p",[s._v("文本文件所使用的换行符，在不同的系统平台上是不一样的。UNIX/Linux 使用的是 0x0A（LF），早期的 Mac OS 使用的是 0x0D（CR），后来的 OS X 在更换内核后与 UNIX 保持一致了。但 DOS/Windows 一直使用 0x0D0A（CRLF） 作为换行符。")]),s._v(" "),n("p",[s._v("跨平台协作开发是常有的，不统一的换行符确实对跨平台的文件交换带来了麻烦。最大的问题是，在不同平台上，换行符发生改变时，Git 会认为整个文件被修改，这就造成我们没法  "),n("code",[s._v("diff")]),s._v(" ，不能正确反映本次的修改。还好 Git 在设计时就考虑了这一点，其提供了一个  "),n("code",[s._v("autocrlf")]),s._v("  的配置项，用于在提交和检出时自动转换换行符，该配置有三个可选项：")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("true")]),s._v(" : 提交时转换为 LF，检出时转换为 CRLF")]),s._v(" "),n("li",[n("code",[s._v("false")]),s._v(" : 提交检出均不转换")]),s._v(" "),n("li",[n("code",[s._v("input")]),s._v(" : 提交时转换为 LF，检出时不转换")])]),s._v(" "),n("p",[s._v("用如下命令即可完成配置：")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 提交时转换为 LF，检出时转换为 CRLF")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global core.autocrlf "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 提交时转换为 LF，检出时不转换")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global core.autocrlf input\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 提交检出均不转换")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global core.autocrlf "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("如果把 autocrlf 设置为 false 时，warning 即可不显示，但另一个配置项 safecrlf 最好设置为 ture。该选项用于检查文件是否包含混合换行符，其有三个可选项：")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("true")]),s._v(" : 拒绝提交包含混合换行符的文件")]),s._v(" "),n("li",[n("code",[s._v("false")]),s._v(" : 允许提交包含混合换行符的文件")]),s._v(" "),n("li",[n("code",[s._v("warn")]),s._v(" : 提交包含混合换行符的文件时给出警告")])]),s._v(" "),n("p",[s._v("配置方法：")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 拒绝提交包含混合换行符的文件")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global core.safecrlf "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 允许提交包含混合换行符的文件")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global core.safecrlf "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 提交包含混合换行符的文件时给出警告")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global core.safecrlf warn\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("到此，还并未解决我遇到的问题。实际上，我们有两种办法解决。")]),s._v(" "),n("p",[s._v("一种是将配置项改为如下的形式：")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[s._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global core.autocrlf "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global core.safecrlf "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("这种方式是不推荐的，虽然代码能被提交，不失败且不报错，但是项目中的文件可能会包含两种格式的换行符。而且会有如上提到的问题，文件被视为整个被修改，无法 diff，之所以使用版本控制工具，最重要的原因之一就是其 diff 功能。")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[s._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global core.autocrlf "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global core.safecrlf warn\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("这种就是对于混合文件报 warning，但是统一的文件不进行处理，要么全为 LF，要么全为 CRLF")]),s._v(" "),n("h3",{attrs:{id:"_4-1-使用替换工具适应多系统-lf-和-crlf"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-使用替换工具适应多系统-lf-和-crlf"}},[s._v("#")]),s._v(" 4.1. 使用替换工具适应多系统 LF 和 CRLF")]),s._v(" "),n("p",[s._v("另一种办法是，手动将文件的换行符转化为 LF，这可以通过编辑器来完成，大部分编辑器都可以将文件的换行符风格设置为 unix 的形式。VSCODE 选右下角换行格式即可，发现修改一个文件的换行符后会被视为文件全部修改，所以在实际应用中这一步不应该与内容的修改一起完成，内容修改完全完成后再进行换行符的修改，防止 diff 失效；"),n("br"),s._v("\n也可以使用 dos2unix 转换工具来完成，Windows 上 Git bash 客户端自带了该工具。其他系统上也可以安装该工具，例如 Ubuntu 上安装：")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" dos2unix\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("有了该工具，可以批量的把项目中的文件都转化一遍：")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" -type f "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("xargs")]),s._v(" dos2unix\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("或者")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" -type f -exec dos2unix "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" +\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("如果涉及到在多个系统平台上工作，推荐将 git 做如下配置：")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[s._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global core.autocrlf input\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global core.safecrlf "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("也就是让代码仓库使用统一的换行符 (LF)，如果代码中包含 CRLF 类型的文件时将无法提交，需要用 dos2unix 或者其他工具手动转换文件类型。当然，可以根据自己的需要进行更为合适的配置！")]),s._v(" "),n("h2",{attrs:{id:"_5-yarn-更新依赖包"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-yarn-更新依赖包"}},[s._v("#")]),s._v(" 5. yarn 更新依赖包")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[s._v("// 先下载\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("yarn")]),s._v(" global "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" npm-check-updates\n// 更新包（yarn.lock 和 package.json 同步更新）\nncu --upgrade --upgradeAll "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("yarn")]),s._v(" upgrade\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("yarn")]),s._v(" upgrade-interactive --latest\n// 需要手动选择升级的依赖包，按空格键选择，a 键切换所有，i 键反选选择\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("TODO git clone 提速 胡乱谷歌尝试可以解决，但是没意义，学完计算机网络再来")])])}),[],!1,null,null,null);a.default=e.exports}}]);